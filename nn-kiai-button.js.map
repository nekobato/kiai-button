{"version":3,"file":"nn-kiai-button.js","sourceRoot":"","sources":["src/nn-kiai-button.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { customElement, property, state } from 'lit/decorators.js';\n\n@customElement('nn-kiai-button')\nexport class NNKiaiButton extends LitElement {\n  @property({ type: Number }) duration = 200;\n  @property({ type: Number }) radius = 50;\n  @property({ type: Number }) strokeWidth = 8;\n  @property({ type: String }) color = '#000000';\n  @state() isPressing: boolean = false;\n  @state() value: number = 0;\n\n  private increaseInterval: NodeJS.Timeout | null = null;\n\n  private onPressing() {\n    const incremental = 100 / this.duration;\n    this.isPressing = true;\n    if (this.increaseInterval) return;\n    this.increaseInterval = setInterval(() => {\n      if (this.isPressing) {\n        if (this.value < 100) {\n          this.value += incremental;\n        }\n      } else {\n        this.value -= incremental * 2;\n      }\n      if (this.value <= 0) {\n        this.value = 0;\n        clearInterval(this.increaseInterval as NodeJS.Timeout);\n        this.increaseInterval = null;\n      }\n      this.requestUpdate();\n    }, 100 / 20); // 20fps\n  }\n\n  private onStopPress() {\n    this.isPressing = false;\n  }\n\n  private onClick() {\n    this.dispatchEvent(new CustomEvent('click'));\n  }\n\n  private onPressingByKey(e: KeyboardEvent) {\n    if (e.code === 'Space' || e.code === 'Enter') {\n      this.onPressing();\n    }\n  }\n\n  private onStopPressByKey(e: KeyboardEvent) {\n    if (e.code === 'Space' || e.code === 'Enter') {\n      this.onStopPress();\n    }\n  }\n\n  render() {\n    const { color, radius: outerR, strokeWidth, value } = this;\n\n    const size = outerR * 2;\n    const r = outerR - strokeWidth / 2;\n    const circumference = 2 * Math.PI * r;\n    const dashoffset = circumference * ((100 - value) / 100);\n\n    return html`\n      <style>\n        :host {\n          border-radius: 50%;\n        }\n        .container {\n          position: relative;\n          width: ${size}px;\n          height: ${size}px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n        }\n        button {\n          width: 100%;\n          height: 100%;\n          border: none;\n          background: none;\n          border-radius: 50%;\n          padding: 0;\n          transition: transform 0.2s;\n        }\n        button.pressing slot {\n          background-color: #444444;\n        }\n        button.activated {\n          transform: scale(1.1);\n        }\n        button.activated slot {\n          color: #000000;\n          background-color: #dddddd;\n        }\n        svg {\n          position: absolute;\n          top: 0;\n          left: 0;\n          transform: rotate(-90deg);\n          cursor: pointer;\n          filter: drop-shadow(0 0 2px rgba(200, 200, 200, 0.8));\n        }\n        slot {\n          display: inline-flex;\n          width: 100%;\n          height: 100%;\n          align-items: center;\n          justify-content: center;\n          background-color: #000000;\n          border-radius: 50%;\n          color: #efefef;\n          font-weight: bold;\n          font-size: 16px;\n        }\n      </style>\n      <div id=\"container\" class=\"container\">\n        <button\n          @mousedown=${this.onPressing}\n          @keydown=${this.onPressingByKey}\n          @mouseup=${this.onStopPress}\n          @mouseleave=${this.onStopPress}\n          @keyup=${this.onStopPressByKey}\n          @click=${this.onClick}\n          class=${classMap({\n            activated: this.value >= 100,\n            pressing: this.isPressing,\n          })}\n        >\n          <slot></slot>\n          <svg width=${size} height=${size} viewBox=${`0 0 ${size} ${size}`}>\n            <circle\n              r=${r}\n              cx=${outerR}\n              cy=${outerR}\n              stroke=${color}\n              fill=\"transparent\"\n              stroke-width=${strokeWidth}\n              stroke-dasharray=${circumference}\n              stroke-dashoffset=${dashoffset}\n            />\n          </svg>\n        </button>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'nn-kiai-button': NNKiaiButton;\n  }\n}\n"]}